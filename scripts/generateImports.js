import path from 'path'
import fs from 'fs-extra'
import camelcase from 'camelcase'
import capitalize from 'capitalize'
import cheerio from 'cheerio'
import glob from 'glob'

const SVG_LIMIT = parseInt(process.env.SVG_LIMIT, 10) || undefined
const SVG_GLOB = process.env.SVG_GLOB || '*.svg'

const dirs = {
  src: 'svg-src',
  tmp: 'svg-tmp',
}
const targetFile = path.resolve(__dirname, '../src/allIcons.js')

function cleanup() {
  return fs.remove(dirs.tmp)
}

/**
 * Converts a thingy to another thingy like what the name of the function says it does
 * @param iconBn {String} A file basename
 * @returns String
 */
function iconBasenameToComponentName(iconBn) {
  return capitalize(camelcase(iconBn.replace(/^ic_/, '')))
}

/**
 * Gets the SVGs using env var limits
 * @param {String} [baseDir=src] Which directory to list (either 'src' or 'tmp').
 * @returns {String[]} glob result
 */
function getSVGs(baseDir) {
  if(!Object.hasOwnProperty.call(dirs, baseDir)) {
    throw new Error(`Unknown base directory. Must be one of ${JSON.stringify(Object.keys(dirs))}`)
  }
  const svgs = glob.sync(`${dirs[baseDir]}/${SVG_GLOB}`)
  if(typeof SVG_LIMIT === 'number' && SVG_LIMIT >= 0) {
    return svgs.slice(0, SVG_LIMIT)
  }
  return svgs
}

/**
 * Adds an empty `<rect>` to maintain the proportions of the SVG (preserveAspectRatio seems to be disregarded somewhere in the chain)
 * @param svgPath {String} Path to the SVG file to process
 * @returns Promise
 */
function processSVG(svgPath) {
  return fs.readFile(svgPath, 'utf8')
    .then(contents => {
      const $ = cheerio.load(contents, { xmlMode: true })
      const h = $('svg').attr('height') || 48
      const w = $('svg').attr('width') || 48
      const rect = `\n  <rect height="${h}" width="${w}" y="0" x="0" fill="none"/>`
      $('svg').prepend(rect)
      return $.xml()
    })
    .then(newContents => fs.writeFile(svgPath, newContents))
    .catch(err => { throw err })
}
function processSVGs() {
  return Promise.all(getSVGs('tmp').map(file => processSVG(file)))
}

function getImportsBody({ importsObjs }) {
  let _s = importsObjs.map(({ componentName, importPath }) => {
    return `import ${componentName} from '${importPath}'`
  }).join('\n')

  _s += '\n\nconst allIcons = {\n  '

  _s += importsObjs.map(({ componentName, iconId }) => {
    return `'${iconId}': ${componentName}`
  }).join(',\n  ') + ',\n'

  _s += '}\n'
  _s += 'export default allIcons\n'

  return _s
}
function writeImports() {
  const importsObjs = getSVGs('tmp')
    .map(iconPath => {
      const bn = path.basename(iconPath, path.extname(iconPath))
      const componentName = 'Icon' + iconBasenameToComponentName(bn)
      const importPath = `../${iconPath}`
      return {
        iconId: bn,
        importPath,
        componentName,
      }
    })
  const _body = getImportsBody({ importsObjs })


  const _head = `/* eslint-disable import/order, no-unused-vars, quote-props */

/******************************
 * THIS FILE IS GENERATED BY scripts/generateImports.js
 * Any changes made to it will be overwritten on the next build.
 */
import React from 'react'
import PropTypes from 'prop-types'
import { Svg, makeSymbol } from 'react-sketchapp'
`
  const fileContents = [_head, _body].join('\n')
  return fs.writeFile(targetFile, fileContents, 'utf8')
    .then(() => {
      console.log(`Injected ${importsObjs.length} imports to ${targetFile}`)
    })
}

/**
 * Copys the svgs from src to tmp
 * @returns {Promise}
 */
function copyTemp() {
  return Promise.all(getSVGs('src').map(filePath => {
    const to = path.join(dirs.tmp, path.basename(filePath))
    return fs.copy(filePath, to)
  }))
}

async function main() {
  await cleanup()
  await copyTemp()
  await processSVGs()
  await writeImports()
}
main()
  .catch(err => {
    console.error(err)
    process.exit(1)
  })
